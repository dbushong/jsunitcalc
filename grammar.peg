// Math!
{
var calc = new JSUnitCalc;
}

start
  = _ expr:additive __ 'in'i __ unit:unit_multiplicative {
      return calc.convert(expr, unit);
    }
  / _ expr:additive _ { return expr; }

additive
  = left:multiplicative _ '+' _ right:additive { return calc.add(left, right); }
  / left:multiplicative _ '-' _ right:additive {
      return calc.subtract(left, right);
    }
  / multiplicative

multiplicative
  = left:powered _ '*' _ right:multiplicative {
      return calc.multiply(left, right);
    }
  / left:powered _ '/' _ right:multiplicative {
      return calc.divide(left, right);
    }
  / powered

powered
  = n:primary _ exp _ pow:powered { return calc.power(n, pow); }
  / primary

exp 'exponentiation'
  = '^'
  / '**'

primary
  = number_with_unit
  / '(' _ additive:additive _ ')' { return additive; }

number_with_unit
  = num:number unit:unit_multiplicative {return new JSUnitCalcValue(num, unit);}
  / number

number 'number'
  = sign:sign? num:just_num exp:('e'i sign? digits)? {
      return parseFloat(sign + num + (exp||[]).join(''));
    }

sign 'sign'
  = [+-]

just_num
  = num:(digits '.' maybe_digits) { return a + '.' + b; }
  / digits
  / '.' b:digits                    { return  '0.' + b; }

digits 'digits'
  = d:[0-9]+ { return (d||[]).join(''); }

maybe_digits
  = d:[0-9]* { return d.join(''); }

unit 'unit'
  = 'ms'
  / 'kg'

unit_multiplicative
  = left:unit_powered _ '*' _ right:unit_multiplicative {
      return calc.multiplyUnits(left, right);
    }
  / left:unit_powered _ '/' _ right:unit_multiplicative {
      return calc.divideUnits(left, right);
    }
  / unit_powered

unit_powered
  = u:unit_primary _ exp _ pow:number { return calc.powerUnits(u, pow); }
  / unit_primary

unit_primary
  = unit
  / '(' _ u:unit_multiplicative _ ')' { return u; }

_ = __*

__ 'whitespace' = [' '\t\r\n]
