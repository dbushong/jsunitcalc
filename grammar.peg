{

function combine(first, rest) {
  var n = first;
  rest.forEach(function (expr) {
    var op = expr[1], val = expr[3];
    n = n[{
      '+': 'add',
      '-': 'sub',
      '*': 'mul',
      '/': 'div'
    }[op]](val.isUnitless() ? val.scalar : val);
  });
  return n;
}

}

start
  = _ qty:additive __ 'in'i __ unit:unit_multiplicative { return qty.to(unit); }
  / _ qty:additive _ { return qty; }

additive
  = first:multiplicative rest:(_ [+-] _ multiplicative)+ {
      return combine(first, rest);
    }
  / multiplicative

multiplicative
  = first:powered rest:(_ [*/] _ powered)+ { return combine(first, rest); }
  / powered

powered
  = n:primary _ exp _ pow:powered {
      throw 'FIXME: powers not supported yet';
    }
  / primary

exp 'exponentiation'
  = '^'
  / '**'

primary
  = number_with_unit
  / '(' _ additive:additive _ ')' { return additive; }

number_with_unit
  = num:number _ unit:unit_multiplicative { return new Qty(num + ' ' + unit); }
  / num:number { return new Qty(num); }

number 'number'
  = sign:sign? num:just_num exp:('e'i sign? digits)? {
      return sign + num + (exp||[]).join('');
    }

sign 'sign'
  = [+-]

just_num
  = num:(digits '.' maybe_digits) { return a + '.' + b; }
  / digits
  / '.' b:digits                    { return  '0.' + b; }

digits 'digits'
  = d:[0-9]+ { return (d||[]).join(''); }

maybe_digits
  = d:[0-9]* { return d.join(''); }

unit_multiplicative
  = bits:(unit_powered _ '*' _ unit_multiplicative) { return bits.join(' '); }
  / bits:(unit_powered _ '/' _ unit_multiplicative) { return bits.join(' '); }
  / unit_powered

unit_powered
  = bits:(unit_primary _ exp _ number) { return bits.join(' '); }
  / unit_primary

unit_primary
  = unit
  / bits:('(' _ unit_multiplicative _ ')') { return bits.join(' '); }

unit 'unit' = str:[a-z]i+ { return str.join(''); }

_ = __*

__ 'whitespace' = [' '\t\r\n]
